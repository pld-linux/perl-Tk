Index: perl-tk/pTk/mTk/additions/ClientWin.c
===================================================================
--- perl-tk.orig/pTk/mTk/additions/ClientWin.c
+++ perl-tk/pTk/mTk/additions/ClientWin.c
@@ -30,7 +30,7 @@ in this Software without prior written a
 #include <X11/Xlib.h>
 #include <X11/Xatom.h>
 
-static Window TryChildren();
+static Window TryChildren(Display *dpy, int win, int WM_STATE);
 
 /* Find a window with WM_STATE, else return win itself, as per ICCCM */
 
Index: perl-tk/pTk/mTk/unix/tkUnixEvent.c
===================================================================
--- perl-tk.orig/pTk/mTk/unix/tkUnixEvent.c
+++ perl-tk/pTk/mTk/unix/tkUnixEvent.c
@@ -416,9 +416,9 @@ DisplayFileProc(clientData, flags)
 	 * message.
 	 */
 
-	void (*oldHandler)();
+        __sighandler_t oldHandler;
 
-	oldHandler = (void (*)()) signal(SIGPIPE, SIG_IGN);
+	oldHandler = signal(SIGPIPE, SIG_IGN);
 	XNoOp(display);
 	XFlush(display);
 	(void) signal(SIGPIPE, oldHandler);
Index: perl-tk/pTk/mTk/unix/tkUnixSelect.c
===================================================================
--- perl-tk.orig/pTk/mTk/unix/tkUnixSelect.c
+++ perl-tk/pTk/mTk/unix/tkUnixSelect.c
@@ -367,7 +367,7 @@ TkSelPropProc(eventPtr)
 	    ((char *) buffer)[numItems] = 0;
 
 	    errorHandler = Tk_CreateErrorHandler(eventPtr->xproperty.display,
-		    -1, -1, -1, (int (*)()) NULL, (ClientData) NULL);
+		    -1, -1, -1, (int (*)(void *, XErrorEvent *)) NULL, (ClientData) NULL);
 	    /*
 	     * Encode the data using the proper format for each type.
 	     */
@@ -872,7 +872,7 @@ ConvertSelection(winPtr, eventPtr)
 	    Tcl_GetThreadData(&dataKey, sizeof(ThreadSpecificData));
 
     errorHandler = Tk_CreateErrorHandler(eventPtr->display, -1, -1,-1,
-	    (int (*)()) NULL, (ClientData) NULL);
+	    (int (*)(void *, XErrorEvent *)) NULL, (ClientData) NULL);
 
     /*
      * Initialize the reply event.
@@ -1149,7 +1149,7 @@ ConvertSelection(winPtr, eventPtr)
 	Tcl_DeleteTimerHandler(incr.timeout);
 	/* winPtr may have been destroyed now */
 	errorHandler = Tk_CreateErrorHandler(reply.display,
-		-1, -1,-1, (int (*)()) NULL, (ClientData) NULL);
+		-1, -1,-1, (int (*)(void *, XErrorEvent *)) NULL, (ClientData) NULL);
 	XSelectInput(reply.display, reply.requestor, 0L);
 	Tk_DeleteErrorHandler(errorHandler);
 	if (tsdPtr->pendingIncrs == &incr) {
